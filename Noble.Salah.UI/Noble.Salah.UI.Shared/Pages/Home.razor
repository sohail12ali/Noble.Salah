@page "/"
@using Noble.Salah.Common.Constants
@using Noble.Salah.Common.Models
@using Noble.Salah.Common.Enums
@using Noble.Salah.Common.Interfaces
@using Noble.Salah.UI.Shared.Components
@inject IFormFactor FormFactor
@inject IPrayerService PrayerService
@inject ILocationService LocationService

<PageTitle>Noble Salah 📿</PageTitle>
<MudCard Class="mb-4">
	<MudCardContent Class="pa-4">
		@if (latitude > 0 && longitude > 0)
		{
			<MudCard Class="mb-4">
				<MudCardContent>
					<MudText Typo="Typo.body2" Align="Align.Center">Location: @latitude, @longitude</MudText>
				</MudCardContent>
			</MudCard>
		}

		@if (prayers is not null && nextPrayerName is not null)
		{
			<MudCard Class="mb-4">
				<MudCardContent>
					<PrayerCarousel Prayers="prayers"
									NextPrayerName="nextPrayerName.Value" />
				</MudCardContent>
				<MudCardHeader>
					<MudText Typo="Typo.body1" Class="mt-2">
						Next Prayer: <strong>@nextPrayerName</strong> at <strong>@nextPrayerTime?.ToShortTimeString()</strong>
					</MudText>
				</MudCardHeader>
			</MudCard>
		}

		<MudButton OnClick="DetectLocationAsync" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-3 me-2">
			📍 Detect My Location
		</MudButton>
		<MudButton OnClick="LoadPrayerTimesAsync" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3">
			🔄 Refresh
		</MudButton>
	</MudCardContent>
</MudCard>

@code {
	private IList<PrayerModel> prayers;
	private PrayerName? nextPrayerName;
	private DateTime? nextPrayerTime;
	private double latitude;
	private double longitude;

	private System.Timers.Timer? timer;
	private TimeSpan remainingTime;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await DetectLocationAsync();
		}
	}

	private async Task DetectLocationAsync()
	{
		var tz = await LocationService.GetLocalTimeZoneIdAsync();
		var loc = await LocationService.GetCurrentLocationAsync();
		if (loc is not null)
		{
			latitude = loc.Value.Latitude;
			longitude = loc.Value.Longitude;
			PrayerService.UpdateConfigs(latitude, longitude, tz);
			await LoadPrayerTimesAsync();
		}
	}

	private async Task LoadPrayerTimesAsync()
	{
		prayers = PrayerService.GetTodayPrayers();
		var (name, time) = PrayerService.GetNextPrayer();
		if (time is null || name is null)
		{
			var prayer = prayers.Last();
			name = prayer.PrayerName;
			time = prayer.PrayerTime;
		}

		nextPrayerName = name;
		nextPrayerTime = time;
		await StartCountdownTimer();
	}

	private Task StartCountdownTimer()
	{
		timer?.Dispose();
		timer = new System.Timers.Timer(1000);
		timer.Elapsed += async (s, e) =>
		{
			UpdateRemainingTime();
			await InvokeAsync(StateHasChanged);
		};
		timer.Start();
		return Task.CompletedTask;
	}

	private void UpdateRemainingTime()
	{
		if (nextPrayerTime.HasValue)
		{
			var diff = nextPrayerTime.Value - DateTime.Now;
			remainingTime = diff > TimeSpan.Zero ? diff : TimeSpan.Zero;
		}
		else
		{
			remainingTime = TimeSpan.Zero;
		}
	}

	private string GetRemainingTime() => remainingTime.ToString(AppConstants.Formats.TimeSpanOnly);
}
