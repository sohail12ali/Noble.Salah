@page "/"
@using Noble.Salah.Common.Models
@using Noble.Salah.Common.Enums
@using Noble.Salah.Common.Interfaces
@using Noble.Salah.UI.Shared.Components
@inject IFormFactor FormFactor
@inject IPrayerService PrayerService
@inject ILocationService LocationService



<PageTitle>Noble Salah</PageTitle>

<MudText Typo="Typo.h4">📿 Noble Salah</MudText>

<MudCard Class="mb-4">
    <MudCardContent>
        <MudText Typo="Typo.h6">Today's Prayer Times</MudText>

        @if (latitude > 0 && longitude > 0)
        {
            <MudText Typo="Typo.body2">Location: @latitude, @longitude</MudText>
        }

        @if (prayers is not null && nextPrayerName is not null)
        {
            <PrayerCarousel Prayers="prayers"
                NextPrayerName="nextPrayerName.Value"  />

            <MudText Typo="Typo.body1" Class="mt-2">
                Next Prayer: <strong>@nextPrayerName</strong> at <strong>@nextPrayerTime?.ToShortTimeString()</strong>
            </MudText>
        }

        <MudButton OnClick="DetectLocationAsync" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-3 me-2">
            📍 Detect My Location
        </MudButton>
        <MudButton OnClick="LoadPrayerTimesAsync" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3">
            🔄 Refresh
        </MudButton>
    </MudCardContent>
</MudCard>

@code {
    private IList<PrayerModel> prayers;
    private PrayerName? nextPrayerName;
    private DateTime? nextPrayerTime;
    private double latitude;
    private double longitude;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DetectLocationAsync();
        }
    }

    private async Task DetectLocationAsync()
    {
        var tz = await LocationService.GetLocalTimeZoneIdAsync();
        var loc = await LocationService.GetCurrentLocationAsync();
        if (loc is not null)
        {
            latitude = loc.Value.Latitude;
            longitude = loc.Value.Longitude;
            PrayerService.UpdateConfigs(latitude, longitude, tz);
            await LoadPrayerTimesAsync();
        }
    }

    private Task LoadPrayerTimesAsync()
    {
        prayers = PrayerService.GetTodayPrayers();
        var (name, time) = PrayerService.GetNextPrayer();
        nextPrayerName = name;
        nextPrayerTime = time;

        StateHasChanged();
        return Task.CompletedTask;
    }
}
