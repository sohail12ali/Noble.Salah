@page "/"
@using Noble.Salah.Common.Constants
@using Noble.Salah.Common.Models
@using Noble.Salah.Common.Enums
@using Noble.Salah.Common.Interfaces
@using Noble.Salah.UI.Shared.Components
@inject IFormFactor FormFactor
@inject IPrayerService PrayerService
@inject ILocationService LocationService
@inject ILocalStorage LocalStorage
@inject NavigationManager NavigationManager

<PageTitle>Noble Salah 📿</PageTitle>
<body>
    @if (isLoading)
    {
        <MudCard Class="mb-4">
            <MudCardContent Class="pa-4">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" Class="d-flex justify-center" />
                <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-3">
                    Loading prayer times...
                </MudText>
            </MudCardContent>
        </MudCard>
    }
    else
    {
        @if (prayers is not null && nextPrayerName is not null)
        {
            <MudCard Class="mb-4">
                <MudCardContent>
                    <PrayerCarousel Prayers="prayers"
                                    NextPrayerName="nextPrayerName.Value"
                                    CurrentPrayerName="currentPrayerName"
                                    ShowCurrentPrayerAsDefault="true"
                                    Height="180px"
                                    MaxHeight="220px" />
                </MudCardContent>
                <MudCardHeader>
                    <MudText Typo="Typo.body2" Class="mt-2">
                        @if (currentPrayerName.HasValue)
                        {
                            <span>Current Prayer: <strong>@currentPrayerName</strong></span>
                            <span class="mx-2">|</span>
                        }
                        Next Prayer: <strong>@nextPrayerName</strong> at <strong>@nextPrayerTime?.ToShortTimeString()</strong>
                    </MudText>
                    @if (remainingTime > TimeSpan.Zero)
                    {
                        <MudText Typo="Typo.h6" Color="Color.Primary" Class="mt-2">
                            ⏰ @GetRemainingTime()
                        </MudText>
                    }
                </MudCardHeader>
            </MudCard>
        }
        
        <!-- Quick Access Features -->
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="feature-card" Style="cursor: pointer;" @onclick="() => NavigateToPrayerTracker()">
                    <MudCardContent Class="text-center pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Primary" Size="Size.Large" />
                        <MudText Typo="Typo.h6" Class="mt-2">Prayer Tracker</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Track your daily prayers</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="feature-card" Style="cursor: pointer;" @onclick="() => NavigateToTasbeeh()">
                    <MudCardContent Class="text-center pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.TouchApp" Color="Color.Secondary" Size="Size.Large" />
                        <MudText Typo="Typo.h6" Class="mt-2">Tasbeeh</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Digital dhikr counter</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="feature-card" Style="cursor: pointer;" @onclick="() => NavigateToQibla()">
                    <MudCardContent Class="text-center pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.Explore" Color="Color.Info" Size="Size.Large" />
                        <MudText Typo="Typo.h6" Class="mt-2">Qibla Compass</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Find prayer direction</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="feature-card" Style="cursor: pointer;" @onclick="() => NavigateToCalendar()">
                    <MudCardContent Class="text-center pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="Color.Warning" Size="Size.Large" />
                        <MudText Typo="Typo.h6" Class="mt-2">Calendar</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Prayer schedules</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }

</body>
@code {
    private IList<PrayerModel>? prayers;
    private PrayerName? nextPrayerName;
    private PrayerName? currentPrayerName;
    private DateTime? nextPrayerTime;
    private double latitude;
    private double longitude;
    private bool isLoading = true;

    private System.Timers.Timer? timer;
    private TimeSpan remainingTime;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await LoadWithCachedLocationAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private async Task LoadWithCachedLocationAsync()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Try to load cached location first
            var cachedLat = await LocalStorage.LoadAsync<double?>(AppConstants.Location.Latitude);
            var cachedLng = await LocalStorage.LoadAsync<double?>(AppConstants.Location.Longitude);
            var cachedTz = await LocalStorage.LoadAsync<string>(AppConstants.Location.Timezone);
            var lastUpdated = await LocalStorage.LoadAsync<DateTime?>(AppConstants.Location.LastUpdated);

            // Check if cached location is recent (less than 1 hour old)
            var isCachedLocationValid = cachedLat.HasValue && cachedLng.HasValue &&
                                       !string.IsNullOrEmpty(cachedTz) &&
                                       lastUpdated.HasValue &&
                                       DateTime.Now - lastUpdated.Value < TimeSpan.FromHours(1);

            if (isCachedLocationValid)
            {
                // Use cached location for immediate display
                latitude = cachedLat.Value;
                longitude = cachedLng.Value;
                PrayerService.UpdateConfigs(latitude, longitude, cachedTz ?? "UTC");
                await LoadPrayerTimesAsync();

                // Update location in background without blocking
                _ = Task.Run(async () => 
                {
                    try
                    {
                        await UpdateLocationInBackgroundAsync();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Background location update failed: {ex.Message}");
                    }
                });
            }
            else
            {
                // No valid cache, get fresh location
                await DetectLocationAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cached location: {ex.Message}");
            // Fallback to fresh location detection
            await DetectLocationAsync();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task DetectLocationAsync()
    {
        try
        {
            var tz = await LocationService.GetLocalTimeZoneIdAsync();
            var loc = await LocationService.GetCurrentLocationAsync();
            if (loc is not null)
            {
                latitude = loc.Value.Latitude;
                longitude = loc.Value.Longitude;

                // Cache the location data
                await LocalStorage.SaveAsync(AppConstants.Location.Latitude, latitude);
                await LocalStorage.SaveAsync(AppConstants.Location.Longitude, longitude);
                await LocalStorage.SaveAsync(AppConstants.Location.Timezone, tz);
                await LocalStorage.SaveAsync(AppConstants.Location.LastUpdated, DateTime.Now);

                PrayerService.UpdateConfigs(latitude, longitude, tz);
                await LoadPrayerTimesAsync();
            }
            else
            {
                // Use default location if geolocation fails
                latitude = 0;
                longitude = 0;
                PrayerService.UpdateConfigs(latitude, longitude, tz);
                await LoadPrayerTimesAsync();
            }
        }
        catch (Exception ex)
        {
            // Log error or show user-friendly message
            Console.WriteLine($"Error detecting location: {ex.Message}");
            // Use default values
            latitude = 0;
            longitude = 0;
            PrayerService.UpdateConfigs(latitude, longitude, "UTC");
            await LoadPrayerTimesAsync();
        }
    }

    private async Task UpdateLocationInBackgroundAsync()
    {
        try
        {
            var tz = await LocationService.GetLocalTimeZoneIdAsync();
            var loc = await LocationService.GetCurrentLocationAsync();
            if (loc is not null)
            {
                // Update cache with fresh location
                await LocalStorage.SaveAsync(AppConstants.Location.Latitude, loc.Value.Latitude);
                await LocalStorage.SaveAsync(AppConstants.Location.Longitude, loc.Value.Longitude);
                await LocalStorage.SaveAsync(AppConstants.Location.Timezone, tz);
                await LocalStorage.SaveAsync(AppConstants.Location.LastUpdated, DateTime.Now);

                // Update prayer service if location changed significantly
                if (Math.Abs(latitude - loc.Value.Latitude) > 0.01 || Math.Abs(longitude - loc.Value.Longitude) > 0.01)
                {
                    latitude = loc.Value.Latitude;
                    longitude = loc.Value.Longitude;
                    PrayerService.UpdateConfigs(latitude, longitude, tz);
                    await LoadPrayerTimesAsync();
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating location in background: {ex.Message}");
        }
    }

    private async Task LoadPrayerTimesAsync()
    {
        try
        {
            prayers = PrayerService.GetTodayPrayers();
            var (name, time) = PrayerService.GetNextPrayer();
            if (time is null || name is null)
            {
                var prayer = prayers.Last();
                name = prayer.PrayerName;
                time = prayer.PrayerTime;
            }

            nextPrayerName = name;
            nextPrayerTime = time;

            // Determine current prayer
            currentPrayerName = DetermineCurrentPrayer();

            await StartCountdownTimer();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading prayer times: {ex.Message}");
        }
    }

    private PrayerName? DetermineCurrentPrayer()
    {
        if (prayers == null || prayers.Count == 0)
            return null;

        var now = DateTime.Now;

        // Find the current prayer (the one that started most recently but hasn't ended)
        for (int i = 0; i < prayers.Count; i++)
        {
            var currentPrayer = prayers[i];
            var nextPrayer = i < prayers.Count - 1 ? prayers[i + 1] : prayers[0]; // Wrap around to first prayer of next day

            // If it's the last prayer of the day, check if we're between this prayer and tomorrow's first prayer
            if (i == prayers.Count - 1)
            {
                // For the last prayer, check if current time is after this prayer and before tomorrow's Fajr
                if (now >= currentPrayer.PrayerTime)
                {
                    return currentPrayer.PrayerName;
                }
            }
            else
            {
                // Check if current time is between this prayer and the next prayer
                if (now >= currentPrayer.PrayerTime && now < nextPrayer.PrayerTime)
                {
                    return currentPrayer.PrayerName;
                }
            }
        }

        return null;
    }

    private Task StartCountdownTimer()
    {
        try
        {
            timer?.Dispose();
            timer = new System.Timers.Timer(1000);
            timer.Elapsed += async (s, e) =>
            {
                try
                {
                    UpdateRemainingTime();
                    UpdateCurrentPrayer();
                    await InvokeAsync(StateHasChanged);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error in timer callback: {ex.Message}");
                }
            };
            timer.Start();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting countdown timer: {ex.Message}");
        }
        return Task.CompletedTask;
    }

    private void UpdateCurrentPrayer()
    {
        if (prayers != null)
        {
            var newCurrentPrayer = DetermineCurrentPrayer();
            if (newCurrentPrayer != currentPrayerName)
            {
                currentPrayerName = newCurrentPrayer;
            }
        }
    }

    private void UpdateRemainingTime()
    {
        if (nextPrayerTime.HasValue)
        {
            var diff = nextPrayerTime.Value - DateTime.Now;
            remainingTime = diff > TimeSpan.Zero ? diff : TimeSpan.Zero;
        }
        else
        {
            remainingTime = TimeSpan.Zero;
        }
    }

    private string GetRemainingTime()
    {
        try
        {
            return $"{remainingTime.Hours:D2}:{remainingTime.Minutes:D2}:{remainingTime.Seconds:D2}";
        }
        catch
        {
            return "00:00:00";
        }
    }

    // Navigation methods
    private void NavigateToPrayerTracker()
    {
        try
        {
            NavigationManager.NavigateTo("/prayer-tracker");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex.Message}");
        }
    }

    private void NavigateToTasbeeh()
    {
        try
        {
            NavigationManager.NavigateTo("/tasbeeh");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex.Message}");
        }
    }

    private void NavigateToQibla()
    {
        try
        {
            NavigationManager.NavigateTo("/qibla");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex.Message}");
        }
    }

    private void NavigateToCalendar()
    {
        try
        {
            NavigationManager.NavigateTo("/calendar");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex.Message}");
        }
    }
}
