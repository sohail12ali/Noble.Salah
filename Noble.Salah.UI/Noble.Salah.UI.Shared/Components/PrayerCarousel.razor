@using Noble.Salah.Common.Models
@using Noble.Salah.Common.Enums
@using MudBlazor

@*
  A standalone carousel component for displaying prayers.
  Parameters:
    - Prayers: List of PrayerModel items to display.
    - NextPrayerName: The PrayerName enum indicating which slide should be active initially.
    - Height: Optional CSS height for the carousel (default: "200px").
*@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<style type="text/css">

    .bounceIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: bounceIn;
        animation-fill-mode: forwards;
    }

    .bounceOut {
        animation-duration: 0.5s;
        animation-name: bounceOut;
        animation-fill-mode: forwards;
    }

    .backInDown {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: backInDown;
        animation-fill-mode: forwards;
    }

    .backOutDown {
        animation-duration: 0.5s;
        animation-name: backOutDown;
        animation-fill-mode: forwards;
    }

    .rotateIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: rotateIn;
        animation-fill-mode: forwards;
    }

    .rotateOut {
        animation-duration: 0.5s;
        animation-name: rotateOut;
        animation-fill-mode: forwards;
    }
</style>

<MudCarousel TData="PrayerModel"
             Class="mud-width-full"
             AutoCycle="false"
             ShowArrows="true"
             Show-Delimiters="true"
             Delimiter-Icon="@Icons.Material.Filled.Circle"
             Prevent-Timer-Restart="true"
             @bind-SelectedIndex="activeSlideIndex"
             Style="@($"height:{GetResponsiveHeight()};")">
    @foreach (var prayer in Prayers)
    {
        <MudCarouselItem>
            <MudPaper Class="pa-0 d-flex flex-column align-center justify-center"
                      Style="@GetPrayerCardStyle(prayer)">
                <div style="position:absolute; inset:0; background-color:rgba(0,0,0,0.3);"></div>
                <div style="@GetPrayerTextStyle(prayer)">
                    <MudText Typo="@GetResponsiveTypo()">@prayer.PrayerName</MudText>
                    <MudText Typo="@GetResponsiveTimeTypo()">@prayer.PrayerTime.ToShortTimeString()</MudText>
                    @if (CurrentPrayerName.HasValue && prayer.PrayerName == CurrentPrayerName.Value)
                    {
                        <MudChip T="string" Color="Color.Success" Size="Size.Small" Class="mt-2">
                            🕐 Current Prayer
                        </MudChip>
                    }
                </div>
            </MudPaper>
        </MudCarouselItem>
    }
</MudCarousel>

@code {
    /// <summary>
    /// The list of prayers to display in the carousel.
    /// </summary>
    [Parameter, EditorRequired]
    public IList<PrayerModel> Prayers { get; set; } = new List<PrayerModel>();

    /// <summary>
    /// The next upcoming prayer; used to set the initial active slide.
    /// </summary>
    [Parameter, EditorRequired]
    public PrayerName NextPrayerName { get; set; }

    /// <summary>
    /// The current prayer (optional); used to highlight the current prayer.
    /// </summary>
    [Parameter]
    public PrayerName? CurrentPrayerName { get; set; }

    /// <summary>
    /// Whether to show current prayer as default active slide (true) or next prayer (false).
    /// </summary>
    [Parameter]
    public bool ShowCurrentPrayerAsDefault { get; set; } = true;

    /// <summary>
    /// Height of the carousel (e.g. "200px").
    /// </summary>
    [Parameter]
    public string Height { get; set; } = "500px";

    private int activeSlideIndex = 0;
    private bool isFirstRender = true;

    protected override void OnParametersSet()
    {
        if (isFirstRender && Prayers.Any())
        {
            // Only set the initial slide on first render
            if (ShowCurrentPrayerAsDefault && CurrentPrayerName.HasValue)
            {
                activeSlideIndex = Prayers
                    .Select((p, idx) => new { p.PrayerName, Index = idx })
                    .FirstOrDefault(x => x.PrayerName == CurrentPrayerName.Value)?.Index ?? 0;
            }
            else
            {
                activeSlideIndex = Prayers
                    .Select((p, idx) => new { p.PrayerName, Index = idx })
                    .FirstOrDefault(x => x.PrayerName == NextPrayerName)?.Index ?? 0;
            }
            isFirstRender = false;
        }
    }

    private string GetPrayerCardStyle(PrayerModel prayer)
    {
        var baseStyle = $"position:relative; background-image:url('{prayer.BackgroundImageSource}'); background-size:cover; background-position:center; height:100%; width:100%;";
        
        if (CurrentPrayerName.HasValue && prayer.PrayerName == CurrentPrayerName.Value)
        {
            // Add a special border or glow for current prayer
            return baseStyle + " border: 3px solid #4CAF50; box-shadow: 0 0 15px rgba(76, 175, 80, 0.6);";
        }
        
        return baseStyle;
    }

    private string GetPrayerTextStyle(PrayerModel prayer)
    {
        if (CurrentPrayerName.HasValue && prayer.PrayerName == CurrentPrayerName.Value)
        {
            return "position:relative; color:white; text-align:center; padding:1rem; background-color:rgba(76, 175, 80, 0.2); border-radius:8px;";
        }
        
        return "position:relative; color:white; text-align:center; padding:1rem;";
    }

    private string GetResponsiveHeight()
    {
        // Use JavaScript to detect screen width and return appropriate height
        return "min-height: 300px; max-height: 500px; height: 60vh;";
    }

    private Typo GetResponsiveTypo()
    {
        // Return smaller typography for mobile screens
        return Typo.h3; // Default to h3, can be made more responsive if needed
    }

    private Typo GetResponsiveTimeTypo()
    {
        // Return smaller typography for mobile screens
        return Typo.h4; // Default to h4, can be made more responsive if needed
    }
}
