@inherits LayoutComponentBase
@using Noble.Salah.Common.Models
@using Noble.Salah.Common.Interfaces
@inject ILocalStorage LocalStorage
@inject ThemeManager ThemeManager

<MudRTLProvider RightToLeft="@_rightToLeft">

	<MudThemeProvider @ref="_mudThemeProvider" Theme="@_currentMudTheme" @bind-IsDarkMode="_isDarkMode" DefaultScrollbar="true" />
	<MudPopoverProvider />
	<MudDialogProvider />
	<MudSnackbarProvider />

	<MudLayout>
		<MudAppBar>
			<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
			Noble Salah
			<MudSpacer />
			<MudIconButton Icon="@_themeIcon" Color="Color.Inherit" Edge="Edge.End" OnClick="ToggleTheme" />
		</MudAppBar>
			<MudDrawer @bind-Open="@_drawerOpen" Variant="DrawerVariant.Responsive">
		<NavMenu />
	</MudDrawer>
		<MudMainContent>
			@Body
		</MudMainContent>
	</MudLayout>
</MudRTLProvider>

@code {
	bool _drawerOpen = false;
	bool _rightToLeft = false;
	bool _isDarkMode = false;
	string _themeIcon = Icons.Material.Filled.Brightness4;
	MudThemeProvider? _mudThemeProvider;
	AppTheme _currentTheme = AppTheme.System;
	MudTheme _currentMudTheme = new MudTheme();

	protected override async Task OnInitializedAsync()
	{
		try
		{
			if (ThemeManager != null)
			{
				await ThemeManager.LoadThemeAsync(LocalStorage);
				_currentTheme = ThemeManager.CurrentTheme;
				ThemeManager.ThemeChanged += StateHasChanged;
				await UpdateThemeAsync();
			}
		}
		catch (Exception ex)
		{
			// Log error and continue with default theme
			Console.WriteLine($"Error initializing theme: {ex.Message}");
			_currentTheme = AppTheme.System;
			_currentMudTheme = new MudTheme();
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_isDarkMode = _mudThemeProvider is not null ? await _mudThemeProvider.GetSystemPreference() : false;
			StateHasChanged();
		}
	}

	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	private async Task ToggleTheme()
	{
		try
		{
			var newTheme = _currentTheme switch
			{
				AppTheme.Light => AppTheme.Dark,
				AppTheme.Dark => AppTheme.Ramadan,
				AppTheme.Ramadan => AppTheme.System,
				AppTheme.System => AppTheme.Light,
				_ => AppTheme.System
			};
			
			if (ThemeManager != null)
			{
				await ThemeManager.SetThemeAsync(newTheme, LocalStorage);
			}
			_currentTheme = newTheme;
			await UpdateThemeAsync();
		}
		catch (Exception ex)
		{
			// Log error and continue
			Console.WriteLine($"Error toggling theme: {ex.Message}");
		}
	}

	private async Task UpdateThemeAsync()
	{
		switch (_currentTheme)
		{
			case AppTheme.Light:
				_isDarkMode = false;
				_themeIcon = Icons.Material.Filled.Brightness7;
				_currentMudTheme = new MudTheme();
				break;
			case AppTheme.Dark:
				_isDarkMode = true;
				_themeIcon = Icons.Material.Filled.Brightness2;
				_currentMudTheme = new MudTheme();
				break;
			case AppTheme.Ramadan:
				_isDarkMode = true;
				_themeIcon = Icons.Material.Filled.Celebration;
				_currentMudTheme = RamadanTheme.GetRamadanTheme();
				break;
			case AppTheme.System:
				_isDarkMode = _mudThemeProvider is not null ? await _mudThemeProvider.GetSystemPreference() : false;
				_themeIcon = Icons.Material.Filled.Brightness4;
				_currentMudTheme = new MudTheme();
				break;
		}
	}
}