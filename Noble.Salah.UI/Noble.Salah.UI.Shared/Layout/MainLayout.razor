@using Noble.Salah.UI.Shared.Services
@using Noble.Salah.Common.Enums
@inject ThemeManager _themeManager
@inherits LayoutComponentBase

<MudRTLProvider RightToLeft="@_rightToLeft">
    <MudThemeProvider @ref="_mudThemeProvider" Theme="_themeManager.Theme" @bind-IsDarkMode="_isDarkMode" DefaultScrollbar="true" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <MudLayout>
        <MudAppBar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            Noble Salah
            <MudSpacer />
            <MudMenu Icon="@_themeIcon" Color="Color.Inherit" Edge="Edge.End" AnchorOrigin="Origin.BottomRight">
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.System))">System</MudMenuItem>
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.LightDefault))">Light</MudMenuItem>
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.DarkDefault))">Dark</MudMenuItem>
                <MudDivider />
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.OceanBreeze))">Ocean Breeze</MudMenuItem>
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.DesertSunset))">Desert Sunset</MudMenuItem>
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.NightSky))">Night Sky</MudMenuItem>
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.MorningDew))">Morning Dew</MudMenuItem>
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.GoldenMosque))">Golden Mosque</MudMenuItem>
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.RoyalPurple))">Royal Purple</MudMenuItem>
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.SerenityBlue))">Serenity Blue</MudMenuItem>
                <MudMenuItem OnClick="@(() => SetTheme(AppTheme.ForestHarmony))">Forest Harmony</MudMenuItem>
            </MudMenu>
        </MudAppBar>
        <MudDrawer @bind-Open="@_drawerOpen">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
</MudRTLProvider>

@code {
    bool _drawerOpen = false;
    bool _rightToLeft = false;
    bool _isDarkMode = false;
    string _themeIcon = Icons.Material.Filled.Palette;

    DrawerVariant _drawerVariant = DrawerVariant.Responsive;
    MudThemeProvider? _mudThemeProvider;
    AppTheme _currentTheme = AppTheme.System;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Initialize theme manager asynchronously with proper error handling
                await _themeManager.InitializeAsync();
                
                // Use the last selected theme (persisted in ThemeManager)
                await SetTheme(_themeManager.CurrentTheme);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                // Log error but don't crash the application
                Console.WriteLine($"Error initializing theme: {ex.Message}");
                // Set default theme as fallback
                await SetTheme(AppTheme.System);
                StateHasChanged();
            }
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task SetTheme(AppTheme themeType)
    {
        try
        {
            _currentTheme = themeType;
            
            // Apply the theme using ThemeManager
            _themeManager.ApplyTheme(themeType);

            // Set dark mode based on theme type
            _isDarkMode = themeType switch
            {
                AppTheme.System => _mudThemeProvider is not null ? await _mudThemeProvider.GetSystemPreference() : false,
                AppTheme.DarkDefault => true,
                AppTheme.OceanBreeze => true,
                AppTheme.DesertSunset => true,
                AppTheme.NightSky => true,
                AppTheme.MorningDew => true,
                AppTheme.GoldenMosque => true,
                AppTheme.RoyalPurple => true,
                AppTheme.SerenityBlue => true,
                AppTheme.ForestHarmony => true,
                _ => false
            };

            // Update theme icon based on the current theme
            _themeIcon = themeType switch
            {
                AppTheme.System => Icons.Material.Filled.SettingsSuggest,
                AppTheme.LightDefault => Icons.Material.Filled.LightMode,
                AppTheme.DarkDefault => Icons.Material.Filled.DarkMode,
                _ => Icons.Material.Filled.Palette
            };
        }
        catch (Exception ex)
        {
            // Log error but don't crash the application
            Console.WriteLine($"Error setting theme: {ex.Message}");
        }
    }
}